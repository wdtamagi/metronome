{"version":3,"sources":["services/songList.ts","store/useStore.ts","components/Bump.tsx","components/BpmButton.tsx","components/Control.tsx","components/SongList.tsx","components/App.tsx","reportWebVitals.ts","globalStyles.ts","index.tsx"],"names":["fetchSongsByBpm","bpm","fetch","headers","method","useStore","create","set","get","songList","updateBpm","value","a","fetchBpmList","undefined","newSongList","response","ok","json","resultObject","tracks","console","log","bumpShapeStyle","css","bumpAnimation","keyframes","Bump","s","duration","BUMP_HEIGHT","BpmButton","props","onClick","BPM_LIST","Control","map","SongList","useEffect","song","track","artist","id_track","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","globalStyles","ReactDOM","render","styles","document","getElementById"],"mappings":"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","file":"static/js/main.172d5bd0.chunk.js","sourcesContent":["const apiKey = \"f29fa04AmSbWKcPe64B7y3T3Y65jY9pWrhX3Qa3Q9eFAjuaTcD8R6SM6\";\n\nexport const fetchSongsByBpm = (bpm: number) =>\n  fetch(`https://api.happi.dev/v1/music/bpm/playlist/${bpm}?limit=5`, {\n    headers: { \"x-happi-key\": apiKey },\n    method: \"GET\",\n  });\n","import create from \"zustand\";\nimport { fetchSongsByBpm } from \"../services/songList\";\n\nexport interface Song {\n  id_track: number;\n  track: string;\n  artist: string;\n  bmp: number;\n}\n\ntype Store = {\n  bpm: number;\n  songList: Record<number, Song[]>;\n  updateBpm: (value: number) => void;\n  fetchBpmList: (bpm: number) => void;\n};\nexport const useStore = create<Store>((set, get) => ({\n  bpm: 72,\n  songList: {},\n  updateBpm: async (value) => {\n    set({ bpm: value });\n    get().fetchBpmList(value);\n  },\n  fetchBpmList: async (bpm: number) => {\n    const newSongList = { ...get().songList };\n\n    if (newSongList[bpm] !== undefined) {\n      return;\n    }\n\n    const response = await fetchSongsByBpm(bpm);\n    if (response.ok) {\n      const resultObject = await response.json();\n      newSongList[bpm] = resultObject.tracks;\n      console.log(newSongList);\n      set({ songList: newSongList });\n    }\n  },\n}));\n","/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport React, { FC } from \"react\";\nimport { useStore } from \"../store/useStore\";\n\nconst BPM_BASE = 60000;\nconst BUMP_HEIGHT = 132;\n\nconst bumpShapeStyle = css`\n  height: ${BUMP_HEIGHT}px;\n  width: ${BUMP_HEIGHT}px;\n  border-radius: 50%;\n`;\n\nconst bumpAnimation = keyframes`\n  100% {\n    transform: scale(2) rotate(360deg);\n    opacity: 0;\n  }\n`;\n\nexport const Bump: FC = () => {\n  const bpm = useStore((s) => s.bpm);\n  const duration = BPM_BASE / bpm;\n\n  return (\n    <div\n      css={css`\n        position: relative;\n        display: grid;\n        place-items: center;\n        height: ${BUMP_HEIGHT * 2}px;\n      `}\n    >\n      <div\n        css={[\n          bumpShapeStyle,\n          css`\n            position: absolute;\n            z-index: 1;\n            display: grid;\n            place-items: center;\n            background-color: #64bca4;\n          `,\n        ]}\n      >\n        <span\n          css={css`\n            color: rgb(22, 16, 32);\n            font-size: 24px;\n            font-weight: 400;\n            letter-spacing: 1.33px;\n          `}\n        >\n          {bpm}\n        </span>\n      </div>\n      <div\n        css={[\n          bumpShapeStyle,\n          css`\n            border-radius: 40%;\n            background: radial-gradient(\n              ellipse 100% 100% at 50% 50%,\n              rgb(100, 188, 164) 0%,\n              rgba(100, 188, 164, 0) 100%\n            );\n            animation: ${bumpAnimation} ${duration}ms ease infinite;\n          `,\n        ]}\n      />\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport React, { FC } from \"react\";\nimport { useStore } from \"../store/useStore\";\n\ninterface BpmButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  value: number;\n}\nexport const BpmButton: FC<BpmButtonProps> = ({ value, ...props }) => {\n  const bpm = useStore((s) => s.bpm);\n  const updateBpm = useStore((s) => s.updateBpm);\n\n  return (\n    <button\n      onClick={() => updateBpm(value)}\n      css={css`\n        display: grid;\n        place-items: center;\n        width: 86px;\n        height: 35px;\n        box-shadow: 0px 1px 2px 0px rgba(0, 0, 0, 0.5);\n        border-radius: 5px;\n        font-size: 14px;\n        font-weight: 400;\n        letter-spacing: 0.78px;\n        text-transform: uppercase;\n        border: none;\n        outline: none;\n        cursor: pointer;\n\n        ${value === bpm\n          ? `\n          color: rgb(22, 16, 32);\n          background: rgb(142, 172, 255);  \n        `\n          : `\n          color: rgb(142, 172, 255);\n          background: rgb(45, 28, 63);\n        `}\n\n        &:hover {\n          ${value !== bpm ? \"background: rgba(142, 172, 255, 0.3);\" : \"\"}\n        }\n      `}\n      {...props}\n    >\n      {`${value} BPM`}\n    </button>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport React, { FC } from \"react\";\nimport { BpmButton } from \"./BpmButton\";\n\nconst BPM_LIST = [72, 74, 82, 84, 128, 138];\n\nexport const Control: FC = () => {\n  return (\n    <div\n      css={css`\n        display: grid;\n        grid-template-columns: auto auto auto;\n        row-gap: 11px;\n        column-gap: 22px;\n        padding-top: 49px;\n      `}\n    >\n      {BPM_LIST.map((value) => (\n        <BpmButton key={value} value={value} />\n      ))}\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport React, { FC, useEffect } from \"react\";\nimport { useStore } from \"../store/useStore\";\n\nexport const SongList: FC = () => {\n  const fetchBpmList = useStore((s) => s.fetchBpmList);\n  const bpm = useStore((s) => s.bpm);\n  const songList = useStore((s) => s.songList)?.[bpm];\n\n  useEffect(() => {\n    fetchBpmList(bpm);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div\n      css={css`\n        padding-top: 32px;\n        color: rgb(142, 172, 255);\n        font-size: 14px;\n        font-weight: 900;\n        text-align: center;\n        letter-spacing: 0.78px;\n      `}\n    >\n      <p>Songs that use this BPM:</p>\n      <ul\n        css={css`\n          text-align: center;\n          list-style: none;\n          color: rgb(255, 255, 255);\n          font-weight: 500;\n          padding: 0;\n        `}\n      >\n        {songList?.map((song) => (\n          <li key={song.id_track}>{`${song.track} (${song.artist})`}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport React, { FC } from \"react\";\nimport { Bump } from \"./Bump\";\nimport { Control } from \"./Control\";\nimport { SongList } from \"./SongList\";\n\nexport const App: FC = () => {\n  return (\n    <div\n      css={css`\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        padding-top: 100px;\n      `}\n    >\n      <h1\n        css={css`\n          color: rgb(142, 172, 255);\n          font-size: 18px;\n          font-weight: 400;\n          text-transform: uppercase;\n          letter-spacing: 6px;\n          padding-bottom: 49px;\n        `}\n      >\n        DIGITAL METRONOME\n      </h1>\n      <Bump />\n      <Control />\n      <SongList />\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from \"@emotion/react\";\n\nexport const globalStyles = css`\n  html,\n  body,\n  #root {\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    margin: 0;\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background-color: #161020;\n  }\n\n  #root {\n    display: grid;\n    grid-template-columns: 1fr min(476px, 100%) 1fr;\n  }\n\n  #root > * {\n    grid-column: 2;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Global } from \"@emotion/react\";\nimport { globalStyles } from \"./globalStyles\";\n\nReactDOM.render(\n  <>\n    <Global styles={globalStyles} />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}